precision highp float;

attribute vec4 position;

varying lowp vec4 color;

uniform float angleX;
uniform float angleY;
uniform float angleZ;

vec4 conjugate(vec4 q) {
  return vec4(-q.x, -q.y, -q.z, q.w);
}

vec4 multiply(vec4 q1, vec4 q2) {
  return vec4(

  );
}

void main() {
  float radX = radians(angleX);

  float halfAngleX = radX * 0.5;

  vec4 rqx = vec4(sin(halfAngleX), 0.0, 0.0, cos(halfAngleX));

  vec4 pq = vec4(position.xyz, 0.0);

  vec4 r = multiply(multiply(rqx, pq), conjugate(rqx));

  gl_Position = r;
  color = r;
}

use hamiltonian product to multiply

amilton product

For two elements a1 + b1i + c1j + d1k and a2 + b2i + c2j + d2k, their product, called the Hamilton product (a1 + b1i + c1j + d1k) (a2 + b2i + c2j + d2k), is determined by the products of the basis elements and the distributive law. The distributive law makes it possible to expand the product so that it is a sum of products of basis elements. This gives the following expression:

a 1 a 2 + a 1 b 2 i + a 1 c 2 j + a 1 d 2 k + b 1 a 2 i + b 1 b 2 i 2 + b 1 c 2 i j + b 1 d 2 i k + c 1 a 2 j + c 1 b 2 j i + c 1 c 2 j 2 + c 1 d 2 j k + d 1 a 2 k + d 1 b 2 k i + d 1 c 2 k j + d 1 d 2 k 2
{\displaystyle {\begin{alignedat}{4}&a_{1}a_{2}&&+a_{1}b_{2}\mathbf {i} &&+a_{1}c_{2}\mathbf {j} &&+a_{1}d_{2}\mathbf {k} \\{}+{}&b_{1}a_{2}\mathbf {i} &&+b_{1}b_{2}\mathbf {i} ^{2}&&+b_{1}c_{2}\mathbf {ij} &&+b_{1}d_{2}\mathbf {ik} \\{}+{}&c_{1}a_{2}\mathbf {j} &&+c_{1}b_{2}\mathbf {ji} &&+c_{1}c_{2}\mathbf {j} ^{2}&&+c_{1}d_{2}\mathbf {jk} \\{}+{}&d_{1}a_{2}\mathbf {k} &&+d_{1}b_{2}\mathbf {ki} &&+d_{1}c_{2}\mathbf {kj} &&+d_{1}d_{2}\mathbf {k} ^{2}\end{alignedat}}}

Now the basis elements can be multiplied using the rules given above to get:[8]

a 1 a 2 − b 1 b 2 − c 1 c 2 − d 1 d 2 + ( a 1 b 2 + b 1 a 2 + c 1 d 2 − d 1 c 2 ) i + ( a 1 c 2 − b 1 d 2 + c 1 a 2 + d 1 b 2 ) j + ( a 1 d 2 + b 1 c 2 − c 1 b 2 + d 1 a 2 ) k
{\displaystyle {\begin{alignedat}{4}&a_{1}a_{2}&&-b_{1}b_{2}&&-c_{1}c_{2}&&-d_{1}d_{2}\\{}+{}(&a_{1}b_{2}&&+b_{1}a_{2}&&+c_{1}d_{2}&&-d_{1}c_{2})\mathbf {i} \\{}+{}(&a_{1}c_{2}&&-b_{1}d_{2}&&+c_{1}a_{2}&&+d_{1}b_{2})\mathbf {j} \\{}+{}(&a_{1}d_{2}&&+b_{1}c_{2}&&-c_{1}b_{2}&&+d_{1}a_{2})\mathbf {k} \end{alignedat}}}

The product of two rotation quaternions[24] will be equivalent to the rotation a2 + b2i + c2j + d2k followed by the rotation a1 + b1i + c1j + d1k.
ChatGPT

To implement the Hamiltonian product for quaternion multiplication in the provided GLSL shader code, you can modify the multiply function as follows:

glsl

vec4 multiply(vec4 q1, vec4 q2) {
  return vec4(
    q1.x * q2.x - q1.y * q2.y - q1.z * q2.z - q1.w * q2.w,
    q1.x * q2.y + q1.y * q2.x + q1.z * q2.w - q1.w * q2.z,
    q1.x * q2.z - q1.y * q2.w + q1.z * q2.x + q1.w * q2.y,
    q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x
  );
}

This implementation follows the Hamiltonian product formula for quaternion multiplication that you provided. It calculates the real component (w) first and then the imaginary components (x, y, z) using the defined multiplication rules.

Make sure to update the multiply function in your shader code with this implementation, and it should correctly perform quaternion multiplication using the Hamiltonian product.
