const quaternionRotationVertexShader = `
precision highp float;

attribute vec4 position;

varying lowp vec4 color;

uniform float angleX;
uniform float angleY;
uniform float angleZ;

vec4 conjugate(vec4 q) {
  return vec4(-q.x, -q.y, -q.z, q.w);
}

vec4 multiply(vec4 q1, vec4 q2) {

}

void main() {
  float radX = radians(angleX);
  float radY = radians(angleY);
  float radZ = radians(angleZ);

  float halfAngleX = radX * 0.5;
  float halfAngleY = radY * 0.5;
  float halfAngleZ = radZ * 0.5;

  vec4 rotationQuaternionX = vec4(sin(halfAngleX), 0.0, 0.0, cos(halfAngleX));
  vec4 rotationQuaternionY = vec4(0.0, sin(halfAngleY), 0.0, cos(halfAngleY));
  vec4 rotationQuaternionZ = vec4(0.0, 0.0, sin(halfAngleZ), cos(halfAngleZ));

  vec4 positionQuaternion = vec4(position.xyz, 0.0);

  vec4 x = multiply(multiply(rotationQuaternionX, positionQuaternion), conjugate(rotationQuaternionX));
  vec4 y = multiply(multiply(rotationQuaternionY, x), conjugate(rotationQuaternionY));
  vec4 z = multiply(multiply(rotationQuaternionZ, y), conjugate(rotationQuaternionZ));

  gl_Position = z;
  color = z;
}
`;

can you finish it?

ChatGPT

Certainly! Here's the completed version of the quaternion rotation vertex shader:

javascript

const quaternionRotationVertexShader = `
precision highp float;

attribute vec4 position;

varying lowp vec4 color;

uniform float angleX;
uniform float angleY;
uniform float angleZ;

vec4 conjugate(vec4 q) {
  return vec4(-q.x, -q.y, -q.z, q.w);
}

vec4 multiply(vec4 q1, vec4 q2) {
  return vec4(
    q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,
    q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,
    q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w,
    q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z
  );
}

void main() {
  float radX = radians(angleX);
  float radY = radians(angleY);
  float radZ = radians(angleZ);

  float halfAngleX = radX * 0.5;
  float halfAngleY = radY * 0.5;
  float halfAngleZ = radZ * 0.5;

  vec4 rotationQuaternionX = vec4(sin(halfAngleX), 0.0, 0.0, cos(halfAngleX));
  vec4 rotationQuaternionY = vec4(0.0, sin(halfAngleY), 0.0, cos(halfAngleY));
  vec4 rotationQuaternionZ = vec4(0.0, 0.0, sin(halfAngleZ), cos(halfAngleZ));

  vec4 positionQuaternion = vec4(position.xyz, 0.0);

  vec4 x = multiply(multiply(rotationQuaternionX, positionQuaternion), conjugate(rotationQuaternionX));
  vec4 y = multiply(multiply(rotationQuaternionY, x), conjugate(rotationQuaternionY));
  vec4 z = multiply(multiply(rotationQuaternionZ, y), conjugate(rotationQuaternionZ));

  gl_Position = z;
  color = z;
}
`;

In this completed version, I added the implementation for the multiply function, which performs quaternion multiplication. The multiplication operation follows the Hamilton product rules for quaternions.

Note: It's important to ensure that the quaternion multiplication is correctly implemented according to the specific conventions and requirements of your application or graphics library. The implementation provided here assumes a specific order of quaternion multiplication that might need adjustment based on your use case.
User
that shader doesn't output values compare to this one

const vertexShaderSource = `
  attribute vec4 position;

  varying lowp vec4 color;

  uniform float angleX;
  uniform float angleY;
  uniform float angleZ;

  // Use Euler's rotation matrices.

  mat3 Rx(float angle) {
    float rad = radians(angle);
    float c = cos(rad);
    float s = sin(rad);

    return mat3(
      1.0, 0.0, 0.0,
      0.0, c, -s,
      0.0, s, c
    );
  }

  mat3 Ry(float angle) {
    float rad = radians(angle);
    float c = cos(rad);
    float s = sin(rad);

    return mat3(
      c, 0.0, s,
      0.0, 1.0, 0.0,
      -s, 0.0, c
    );
  }

  mat3 Rz(float angle) {
    float rad = radians(angle);
    float c = cos(rad);
    float s = sin(rad);

    return mat3(
      c, -s, 0.0,
      s, c, 0.0,
      0.0, 0.0, 1.0
    );
  }

  void main() {
    // Create lightning to make edges clearly visible.
    mat3 rotation = Rx(angleX) * Ry(angleY) * Rz(angleZ);
    vec4 result = vec4(rotation * position.xyz, position.w);

    gl_Position = result;
    color = result;
  }
`;
ChatGPT

Apologies for the confusion. If you prefer to use Euler's rotation matrices instead of quaternions, here's the modified version of the shader using Euler angles:

javascript

const vertexShaderSource = `
  attribute vec4 position;

  varying lowp vec4 color;

  uniform float angleX;
  uniform float angleY;
  uniform float angleZ;

  // Use Euler's rotation matrices.

  mat3 Rx(float angle) {
    float rad = radians(angle);
    float c = cos(rad);
    float s = sin(rad);

    return mat3(
      1.0, 0.0, 0.0,
      0.0, c, -s,
      0.0, s, c
    );
  }

  mat3 Ry(float angle) {
    float rad = radians(angle);
    float c = cos(rad);
    float s = sin(rad);

    return mat3(
      c, 0.0, s,
      0.0, 1.0, 0.0,
      -s, 0.0, c
    );
  }

  mat3 Rz(float angle) {
    float rad = radians(angle);
    float c = cos(rad);
    float s = sin(rad);

    return mat3(
      c, -s, 0.0,
      s, c, 0.0,
      0.0, 0.0, 1.0
    );
  }

  void main() {
    // Create lightning to make edges clearly visible.
    mat3 rotation = Rx(angleX) * Ry(angleY) * Rz(angleZ);
    vec4 result = vec4(rotation * position.xyz, position.w);

    gl_Position = result;
    color = result;
  }
`;

This modified shader calculates the rotation matrix using Euler angles
