Dimension
  private:
    symbol

    GetDirection2D(distance, axis):
      if axis == AXIS.X:
        return distance < 0 ? Direction.LEFT : Direction.RIGHT
      if axis == AXIS.Y:
        return distance < 0 ? Direction.DOWN : Direction.UP

      // we should never fall down here if we use typed enum AXIS

    GetDirection3D(distance, axis):
      if axis == AXIS.X:
        return distance < 0 ? Direction.DOWN_LEFT : Direction.UP_RIGHT
      if axis == AXIS.Y:
        return distance < 0 ? Direction.LEFT : Direction.RIGHT
      if axis == AXIS.Z:
        return distance < 0 ? Direction.DOWN : Direction.UP

      // we should never fall down here if we use typed enum AXIS

    GetDirection(distance, axis):
      if symbol == Symbol.2D:
        return Direction2D(distance, axis)
      if symbol == Symbol.3D:
        return Direction3D(distance, axis)

      // we should never fall down here if we use typed enum AXIS

  public:
    GetDirectionAndSteps(begin, end, axis):
      distance = calculate::GetDistance(begin, end)
      direction = calculate::GetDirection(distance, axis)
      steps = GetSteps(distance)

      return [direction, steps]
